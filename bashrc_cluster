# .bashrc

# Source global definitions
if [ -f /etc/bashrc ]; then
	. /etc/bashrc
fi

# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color|*-256color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# colored GCC warnings and errors
#export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

# some more ls aliases
alias ll='ls -ahlF'
alias la='ls -A'
alias l='ls -CF'

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

### Personal settings

## Aliases
alias op='gio open'
alias gis='git status'
alias gil='git log --all --decorate --oneline --graph'
alias gils='git log' #for 'simple'
alias gib='git branch'
alias gid='git diff'
alias gic='git checkout'

alias gicane='git commit --amend --no-edit'

###########Credit : https://github.com/stephenturner/oneliners #############
# Browse up and down
alias u='clear; cd ../; pwd; ls -lhGgo'
alias d='clear; cd -; ls -lhGgo'
alias ..='cd ..'
alias ...='cd ../../'
alias ....='cd ../../../'
alias .....='cd ../../../../'
alias ......='cd ../../../../../'
mcd(){ mkdir -p "$1" && cd "$1";}
#######################################################################

#######Cluster###########
alias bp='bpeek -f'
alias bj='bjobs'
alias jupyter_compute='jupyter-lab --no-browser --ip 0.0.0.0 --port=8889'
alias cluster_LOAD="lsload | awk '{a[\$2]++} END{ for (i in a) {print a[i],i}}'"

_cluster_users="tr -s ' ' | cut -f2 -d ' ' | sort | uniq -c | sort -n -r"
alias cluster_USERJOBS="bjobs -u all | ${_cluster_users}" # Pending jobs, number per users
alias cluster_USERPENDS="bjobs -u all | grep PEND | ${_cluster_users}" # Pending jobs, number per users

cluster_NUMPEND(){ # Pending priority numbers, for user $1
	bjobs -u all | grep PEND | awk '{jobs += 1; if ($2=='\"$1\"') {print "L: "jobs, $0}} END{print "Total num pending jobs: "jobs}'
}
alias cluster_STATUS='badmin showstatus'

# function to start an interactive jobs with given memory and threads
# usage: bsub_i <mem_in_gb> <threads>
bsub_i() {
    mem="${1:-1}"
    mem=$((mem * 1000))
    threads="${2:-1}"
    bsub -Is -n "$threads" -R "span[hosts=1] select[mem>${mem}] rusage[mem=${mem}]" -M"$mem" "$SHELL"
}


#########################

# Enable command history search using vi. Escape first to get out of insert mode.
set -o vi

# Shared installation of software for predocs
# export PATH=/nfs/software/software/prefix/usr/bin:$PATH

# Login at nobackup
ME_nfs=/nfs/research/zi/bletcher
ME_hps=/hps/nobackup/iqbal/bletcher
cd $ME_hps

export TMPDIR="/tmp" # Note, cannot set tmp to hps on codon, as hps is not writable
export TMP=$"TMPDIR"
#SINGULARITY_BINDS="/hps/nobackup/research/iqbal,/nfs/research1/zi,${TMPDIR}:/scratch"
#export SINGULARITY_CONTAIN=TRUE
#export SINGULARITY_BINDPATH="$SINGULARITY_BINDS"


# Source the team's software
SOFTWARE="/hps/software/users/iqbal"
[ -f ${SOFTWARE}/sourceme ] && source ${SOFTWARE}/sourceme 

# Source modules installed by systems 
module load gcc-9.3.0-gcc-9.3.0-lnsweiq
module load python-3.8.6-gcc-9.3.0-fwf7y73
module load singularity-3.5.3-gcc-9.3.0-o6v53jz
# noah gcc:
#.   /nfs/software/noah/spack/share/spack/setup-env.sh
#.   /nfs/software/noah/spack/opt/spack/linux-rhel7-sandybridge/gcc-4.8.5/lmod-8.3-dyllmlkbirp7xbo5ya3syrlz6qbnvyjc/lmod/lmod/init/bash

# Source my vim installation
#PATH=${SOFTWARE}/vim/vim-8.2.0992/src:$PATH
#export VIMRUNTIME=/nfs/research1/zi/software/vim/vim-8.2.0992/runtime

# Source my python installation
export PATH=${SOFTWARE}/Python-3.8.1_sharedlib/bin:$PATH
export LD_LIBRARY_PATH=${SOFTWARE}/Python-3.8.1_sharedlib/lib:$LD_LIBRARY_PATH



[ -f ~/.fzf.bash ] && source ~/.fzf.bash

